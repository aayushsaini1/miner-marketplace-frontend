{"ast":null,"code":"import _classCallCheck from\"/Users/saumay/Desktop/miner-marketplace-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/saumay/Desktop/miner-marketplace-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/saumay/Desktop/miner-marketplace-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/saumay/Desktop/miner-marketplace-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{Link}from'react-router-dom';import{Table}from'antd';export var TransactionTable=/*#__PURE__*/function(_Component){_inherits(TransactionTable,_Component);var _super=_createSuper(TransactionTable);function TransactionTable(){var _this;_classCallCheck(this,TransactionTable);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.columns=[{title:\"Transaction Type\",dataIndex:\"direction\",align:\"left\",sorter:{compare:function compare(a,b){return a.transactionType-b.transactionType;}}},{title:\"Amount\",dataIndex:\"amount\",align:\"left\",sorter:{compare:function compare(a,b){return a.amount-b.amount;}},render:function render(value){return _this.formatFIL(value);}},{title:\"Sender\",dataIndex:\"sender\",align:\"left\"},{title:\"Receiver\",dataIndex:\"receiver\",align:\"left\"},{title:\"Height\",dataIndex:\"height\",align:\"left\",sorter:{compare:function compare(a,b){return a.height-b.height;}}},{title:\"Miner Fee\",dataIndex:\"minerFee\",align:\"left\",sorter:{compare:function compare(a,b){return parseInt(a.minerFee)-parseInt(b.minerFee);}},render:function render(value){return _this.formatFIL(value);}},{title:\"Burn Fee\",dataIndex:\"burnFee\",align:\"left\",sorter:{compare:function compare(a,b){return parseInt(a.burnFee)-parseInt(b.burnFee);}},render:function render(value){return _this.formatFIL(value);}},{title:\"Actor Name\",dataIndex:\"actorName\",align:\"left\",sorter:{compare:function compare(a,b){return a.actorName-b.actorName;}}},{title:\"Method\",dataIndex:\"methodName\",align:\"left\",sorter:{compare:function compare(a,b){return a.methodName-b.methodName;}}}];return _this;}_createClass(TransactionTable,[{key:\"formatFIL\",// columns = [\n// {\n//     title: 'Address',\n//     dataIndex: 'Address',\n//     align: 'left',\n// },\n// {\n//     title: 'Activation Round',\n//     dataIndex: 'ActivationRound',\n//     align: 'center',\n//     sorter: {\n//         compare: (a, b) => a.ActivationRound - b.ActivationRound\n//     },\n// },\n// {\n//     title: 'Last Reward Round',\n//     dataIndex: 'LastRewardRound',\n//     align: 'center',\n//     sorter: {\n//         compare: (a, b) => a.LastRewardRound - b.LastRewardRound\n//     },\n// },\n// {\n//     title: 'Delegated Stake',\n//     dataIndex: 'DelegatedStake',\n//     align: 'right',\n//     sorter: {\n//         compare: (a, b) => a.DelegatedStakeRaw - b.DelegatedStakeRaw\n//     },\n// },\n// {\n//     title: 'Reward Cut',\n//     dataIndex: 'RewardCut',\n//     align: 'right',\n//     sorter: {\n//         compare: (a, b) => a.RewardCut - b.RewardCut\n//     },\n//     render: (text) => text + \"%\"\n// },\n// {\n//     title: 'Fee Share',\n//     dataIndex: 'FeeShare',\n//     align: 'right',\n//     sorter: {\n//         compare: (a, b) => a.FeeShare - b.FeeShare\n//     },\n//     render: (text) => text + \"%\"\n// },\n// {\n//     title: 'Total Fees Earned',\n//     dataIndex: 'TotalGeneratedFees',\n//     align: 'right',\n//     sorter: {\n//         compare: (a, b) => a.TotalGeneratedFeesRaw - b.TotalGeneratedFeesRaw\n//     }\n// },\n// {\n//     title: 'Price Per Pixel',\n//     dataIndex: 'PricePerPixel',\n//     align: 'right',\n//     sorter: {\n//         compare: (a, b) => a.PricePerPixelRaw - b.PricePerPixelRaw\n//     }\n// },\n// {\n//     title: 'Price History',\n//     align: 'center',\n//     render: function (text, record, index) {\n//         return (\n//             <Link to={{\n//                 pathname: \"/priceHistory/\"+record.Address,\n//                 address: record.Address\n//             }}>\n//                 { \"View\" }\n//             </Link>\n//         )\n//     }\n// },\n// // {\n// //     title: 'Active',\n// //     dataIndex: 'Active',\n// //     align: 'center',\n// // },\n// // {\n// //     title: 'Status',\n// //     dataIndex: 'Status',\n// //     align: 'center',\n// // },\n// ];\n// formatNumber(num, prec) {\n//     num = num.toFixed(prec)\n//     num = num.toString()\n//     let numstring = \"\"\n//     let periodpos = num.indexOf(\".\")\n//     let flag = 0\n//     numstring = num.slice(periodpos, num.length)\n//     for (let index = periodpos; index > 0; index=index-3) {\n//         let start = index - 3\n//         if (start < 0) {\n//             start = 0\n//         }\n//         if(flag===0) {\n//             numstring = num.slice(start, index) + numstring\n//             flag = 1\n//         } else {\n//             numstring = num.slice(start, index) + \",\" + numstring\n//         }\n//     }\n//     return numstring\n// }\n// processDelegatedStake(ds) {\n//     if (ds > 10**15) {\n//         return this.formatNumber(ds / 10**18, 3) + \" LPT\"\n//     } else {\n//         return this.formatNumber(ds, 3) + \" LPTU\"\n//     }\n// }\n// processFees(fees) {\n//     fees = fees * 1.0\n//     return this.formatNumber(fees / 10**18, 6) + \" ETH\"\n// }\n// processPPP(ppp) {\n//     if (ppp < 0) {\n//         return \"-\" + this.formatNumber(Math.abs(ppp), 3) + \" wei\"\n//     } else {\n//         return this.formatNumber(Math.abs(ppp), 3) + \" wei\"\n//     }\n// }\n// preprocessData(data) {\n//     let newdata = []\n//     data.forEach(element => {\n//         newdata.push({\n//             key: element.Address,\n//             Address: element.Address,\n//             ServiceURI: element.ServiceURI,\n//             LastRewardRound: element.LastRewardRound,\n//             RewardCut: element.RewardCut / 10000,\n//             FeeShare: element.FeeShare / 10000,\n//             DelegatedStakeRaw: element.DelegatedStake,\n//             DelegatedStake: this.processDelegatedStake(element.DelegatedStake),\n//             ActivationRound: element.ActivationRound,\n//             DeactivationRound: element.DeactivationRound,\n//             Active: (element.Active ? \"Active\" : \"Inactive\"),\n//             Status: element.Status,\n//             PricePerPixelRaw: element.PricePerPixel,\n//             PricePerPixel: this.processPPP(element.PricePerPixel),\n//             UpdatedAt: element.UpdatedAt,\n//             TotalGeneratedFeesRaw: element.TotalGeneratedFees,\n//             TotalGeneratedFees: this.processFees(element.TotalGeneratedFees),\n//         })\n//     });\n//     return newdata\n// }\n// onChange (pagination, filters, sorter, extra) {\n//     console.log('params', pagination, filters, sorter, extra);\n// }\nvalue:function formatFIL(value){value=parseInt(value);// console.log(value, typeof(value))\nvalue=value/Math.pow(10,18);// console.log(value)\nvalue=value.toFixed(4);// console.log(value)\nreturn value.toString()+\" FIL\";}},{key:\"onChange\",value:function onChange(pagination,filters,sorter,extra){console.log('params',pagination,filters,sorter,extra);}},{key:\"render\",value:function render(){// const data = this.preprocessData(this.props.data)\nreturn/*#__PURE__*/React.createElement(Table,{columns:this.columns,dataSource:this.props.data,onChange:this.onChange,pagination:true});}}]);return TransactionTable;}(Component);export default TransactionTable;","map":{"version":3,"sources":["/Users/saumay/Desktop/miner-marketplace-frontend/src/components/TransactionTable.js"],"names":["React","Component","Link","Table","TransactionTable","columns","title","dataIndex","align","sorter","compare","a","b","transactionType","amount","render","value","formatFIL","height","parseInt","minerFee","burnFee","actorName","methodName","toFixed","toString","pagination","filters","extra","console","log","props","data","onChange"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Link } from 'react-router-dom';\nimport { Table } from 'antd';\n\nexport class TransactionTable extends Component {\n\n    // columns = [\n    // {\n    //     title: 'Address',\n    //     dataIndex: 'Address',\n    //     align: 'left',\n    // },\n    // {\n    //     title: 'Activation Round',\n    //     dataIndex: 'ActivationRound',\n    //     align: 'center',\n    //     sorter: {\n    //         compare: (a, b) => a.ActivationRound - b.ActivationRound\n    //     },\n    // },\n    // {\n    //     title: 'Last Reward Round',\n    //     dataIndex: 'LastRewardRound',\n    //     align: 'center',\n    //     sorter: {\n    //         compare: (a, b) => a.LastRewardRound - b.LastRewardRound\n    //     },\n    // },\n    // {\n    //     title: 'Delegated Stake',\n    //     dataIndex: 'DelegatedStake',\n    //     align: 'right',\n    //     sorter: {\n    //         compare: (a, b) => a.DelegatedStakeRaw - b.DelegatedStakeRaw\n    //     },\n    // },\n    // {\n    //     title: 'Reward Cut',\n    //     dataIndex: 'RewardCut',\n    //     align: 'right',\n    //     sorter: {\n    //         compare: (a, b) => a.RewardCut - b.RewardCut\n    //     },\n    //     render: (text) => text + \"%\"\n    // },\n    // {\n    //     title: 'Fee Share',\n    //     dataIndex: 'FeeShare',\n    //     align: 'right',\n    //     sorter: {\n    //         compare: (a, b) => a.FeeShare - b.FeeShare\n    //     },\n    //     render: (text) => text + \"%\"\n    // },\n    // {\n    //     title: 'Total Fees Earned',\n    //     dataIndex: 'TotalGeneratedFees',\n    //     align: 'right',\n    //     sorter: {\n    //         compare: (a, b) => a.TotalGeneratedFeesRaw - b.TotalGeneratedFeesRaw\n    //     }\n    // },\n    // {\n    //     title: 'Price Per Pixel',\n    //     dataIndex: 'PricePerPixel',\n    //     align: 'right',\n    //     sorter: {\n    //         compare: (a, b) => a.PricePerPixelRaw - b.PricePerPixelRaw\n    //     }\n    // },\n    // {\n    //     title: 'Price History',\n    //     align: 'center',\n    //     render: function (text, record, index) {\n    //         return (\n    //             <Link to={{\n    //                 pathname: \"/priceHistory/\"+record.Address,\n    //                 address: record.Address\n    //             }}>\n    //                 { \"View\" }\n    //             </Link>\n    //         )\n    //     }\n    // },\n    // // {\n    // //     title: 'Active',\n    // //     dataIndex: 'Active',\n    // //     align: 'center',\n    // // },\n    // // {\n    // //     title: 'Status',\n    // //     dataIndex: 'Status',\n    // //     align: 'center',\n    // // },\n    // ];\n\n    // formatNumber(num, prec) {\n    //     num = num.toFixed(prec)\n    //     num = num.toString()\n    //     let numstring = \"\"\n    //     let periodpos = num.indexOf(\".\")\n    //     let flag = 0\n    //     numstring = num.slice(periodpos, num.length)\n    //     for (let index = periodpos; index > 0; index=index-3) {\n    //         let start = index - 3\n    //         if (start < 0) {\n    //             start = 0\n    //         }\n    //         if(flag===0) {\n    //             numstring = num.slice(start, index) + numstring\n    //             flag = 1\n    //         } else {\n    //             numstring = num.slice(start, index) + \",\" + numstring\n    //         }\n    //     }\n    //     return numstring\n    // }\n\n    // processDelegatedStake(ds) {\n    //     if (ds > 10**15) {\n    //         return this.formatNumber(ds / 10**18, 3) + \" LPT\"\n    //     } else {\n    //         return this.formatNumber(ds, 3) + \" LPTU\"\n    //     }\n    // }\n\n    // processFees(fees) {\n    //     fees = fees * 1.0\n    //     return this.formatNumber(fees / 10**18, 6) + \" ETH\"\n    // }\n\n    // processPPP(ppp) {\n    //     if (ppp < 0) {\n    //         return \"-\" + this.formatNumber(Math.abs(ppp), 3) + \" wei\"\n    //     } else {\n    //         return this.formatNumber(Math.abs(ppp), 3) + \" wei\"\n    //     }\n    // }\n\n    // preprocessData(data) {\n    //     let newdata = []\n    //     data.forEach(element => {\n    //         newdata.push({\n    //             key: element.Address,\n    //             Address: element.Address,\n    //             ServiceURI: element.ServiceURI,\n    //             LastRewardRound: element.LastRewardRound,\n    //             RewardCut: element.RewardCut / 10000,\n    //             FeeShare: element.FeeShare / 10000,\n    //             DelegatedStakeRaw: element.DelegatedStake,\n    //             DelegatedStake: this.processDelegatedStake(element.DelegatedStake),\n    //             ActivationRound: element.ActivationRound,\n    //             DeactivationRound: element.DeactivationRound,\n    //             Active: (element.Active ? \"Active\" : \"Inactive\"),\n    //             Status: element.Status,\n    //             PricePerPixelRaw: element.PricePerPixel,\n    //             PricePerPixel: this.processPPP(element.PricePerPixel),\n    //             UpdatedAt: element.UpdatedAt,\n    //             TotalGeneratedFeesRaw: element.TotalGeneratedFees,\n    //             TotalGeneratedFees: this.processFees(element.TotalGeneratedFees),\n    //         })\n    //     });\n    //     return newdata\n    // }\n\n    // onChange (pagination, filters, sorter, extra) {\n    //     console.log('params', pagination, filters, sorter, extra);\n    // }\n\n    formatFIL(value) {\n        value = parseInt(value)\n        // console.log(value, typeof(value))\n        value = value / (10**18)\n        // console.log(value)\n        value = value.toFixed(4)\n        // console.log(value)\n        return value.toString() + \" FIL\"\n    }\n \n    columns = [\n        {\n            title: \"Transaction Type\",\n            dataIndex: \"direction\",\n            align: \"left\",\n            sorter: {\n                compare: (a, b) => a.transactionType - b.transactionType\n            }\n        },\n        {\n            title: \"Amount\",\n            dataIndex: \"amount\",\n            align: \"left\",\n            sorter: {\n                compare: (a, b) => a.amount - b.amount\n            },\n            render: (value) => this.formatFIL(value) \n        },\n        {\n            title: \"Sender\",\n            dataIndex: \"sender\",\n            align: \"left\"\n        },\n        {\n            title: \"Receiver\",\n            dataIndex: \"receiver\",\n            align: \"left\"\n        },\n        {\n            title: \"Height\",\n            dataIndex: \"height\",\n            align: \"left\",\n            sorter: {\n                compare: (a, b) => a.height - b.height\n            }\n        },\n        {\n            title: \"Miner Fee\",\n            dataIndex: \"minerFee\",\n            align: \"left\",\n            sorter: {\n                compare: (a, b) => parseInt(a.minerFee) - parseInt(b.minerFee)\n            },\n            render: (value) => this.formatFIL(value) \n        },\n        {\n            title: \"Burn Fee\",\n            dataIndex: \"burnFee\",\n            align: \"left\",\n            sorter: {\n                compare: (a, b) => parseInt(a.burnFee) - parseInt(b.burnFee)\n            },\n            render: (value) => this.formatFIL(value) \n        },\n        {\n            title: \"Actor Name\",\n            dataIndex: \"actorName\",\n            align: \"left\",\n            sorter: {\n                compare: (a, b) => a.actorName - b.actorName\n            }\n        },{\n            title: \"Method\",\n            dataIndex: \"methodName\",\n            align: \"left\",\n            sorter: {\n                compare: (a, b) => a.methodName - b.methodName\n            }\n        },\n    ]\n\n    onChange (pagination, filters, sorter, extra) {\n            console.log('params', pagination, filters, sorter, extra);\n        }\n    \n    \n    render() {\n        // const data = this.preprocessData(this.props.data)\n        return (\n            <Table columns={this.columns} dataSource={this.props.data} onChange={this.onChange} pagination={true}/>\n        )\n    }\n}\n\nexport default TransactionTable\n"]},"metadata":{},"sourceType":"module"}