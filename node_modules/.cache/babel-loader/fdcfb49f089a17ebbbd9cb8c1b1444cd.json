{"ast":null,"code":"var _jsxFileName = \"/Users/saumay/Desktop/miner-marketplace-frontend/src/components/PriceHistoryGraph.js\";\nimport React, { Component } from 'react';\nimport Chart from \"chart.js\";\nimport classes from \"./LineGraph.module.css\";\nexport class PriceHistoryGraph extends Component {\n  constructor(...args) {\n    super(...args);\n    this.chartRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const myChartRef = this.chartRef.current.getContext(\"2d\");\n    const data = this.reformatData(this.props.data);\n    new Chart(myChartRef, {\n      type: \"line\",\n      data: {\n        labels: data.time,\n        datasets: [{\n          label: \"Price Per Pixel\",\n          data: data.ppp,\n          fill: false,\n          borderColor: \"#07b35f\",\n          borderWidth: 2,\n          pointRadius: 1.5\n        }]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        tooltips: {\n          displayColors: false\n        },\n        legend: {\n          display: false\n        },\n        scales: {\n          xAxes: [{\n            type: \"time\",\n            time: {\n              unit: \"day\"\n            },\n            gridLines: {\n              drawOnChartArea: false\n            },\n            scaleLabel: {\n              display: true,\n              labelString: \"Time (UTC)\"\n            }\n          }],\n          yAxes: [{\n            gridLines: {\n              drawOnChartArea: false\n            },\n            scaleLabel: {\n              display: true,\n              labelString: \"Price Per Pixel (wei/pixel)\"\n            }\n          }]\n        }\n      }\n    });\n  }\n\n  reformatData(data) {\n    data = data.slice(0, 240);\n    data = data.reverse();\n    let newdata = {\n      time: [],\n      ppp: []\n    };\n    data.forEach(element => {\n      let time = new Date(element.Time * 1000);\n      time = time.toISOString().slice(0, -5).replace(\"T\", \" \");\n      newdata.time.push(time);\n      newdata.ppp.push(element.PricePerPixel);\n    });\n    return newdata;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.graphContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      id: \"myChart\",\n      ref: this.chartRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\nexport default PriceHistoryGraph;","map":{"version":3,"sources":["/Users/saumay/Desktop/miner-marketplace-frontend/src/components/PriceHistoryGraph.js"],"names":["React","Component","Chart","classes","PriceHistoryGraph","chartRef","createRef","componentDidMount","myChartRef","current","getContext","data","reformatData","props","type","labels","time","datasets","label","ppp","fill","borderColor","borderWidth","pointRadius","options","responsive","maintainAspectRatio","tooltips","displayColors","legend","display","scales","xAxes","unit","gridLines","drawOnChartArea","scaleLabel","labelString","yAxes","slice","reverse","newdata","forEach","element","Date","Time","toISOString","replace","push","PricePerPixel","render","graphContainer"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Chart from \"chart.js\";\nimport classes from \"./LineGraph.module.css\";\n\nexport class PriceHistoryGraph extends Component {\n\n    chartRef = React.createRef();\n\n    componentDidMount() {\n        \n        const myChartRef = this.chartRef.current.getContext(\"2d\");\n        const data = this.reformatData(this.props.data)\n        \n        new Chart(myChartRef, {\n            type: \"line\",\n            data: {\n                labels: data.time,\n                datasets: [\n                    {\n                        label: \"Price Per Pixel\",\n                        data: data.ppp,\n                        fill: false,\n                        borderColor: \"#07b35f\",\n                        borderWidth: 2,\n                        pointRadius: 1.5\n                    }\n                ]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                tooltips: {\n                    displayColors: false\n                },\n                legend: {\n                    display: false\n                },\n                scales: {\n                    xAxes: [{\n                        type: \"time\",\n                        time: {\n                            unit: \"day\"\n                        },\n                        gridLines: {\n                            drawOnChartArea: false\n                        },\n                        scaleLabel: {\n                            display: true,\n                            labelString: \"Time (UTC)\"\n                        }\n                    }],\n                    yAxes: [{\n                        gridLines: {\n                            drawOnChartArea: false\n                        },\n                        scaleLabel: {\n                            display: true,\n                            labelString: \"Price Per Pixel (wei/pixel)\"\n                        }\n                    }],\n                }\n            }\n        });\n    }\n\n    reformatData (data) {\n        data = data.slice(0, 240)\n        data = data.reverse()\n        let newdata = {\n            time: [],\n            ppp: []\n        }\n        data.forEach(element => {\n            let time = new Date(element.Time*1000)\n            time = time.toISOString().slice(0,-5).replace(\"T\", \" \")\n            newdata.time.push(time)\n            newdata.ppp.push(element.PricePerPixel)\n        })\n        return newdata\n    }\n\n    render () {\n        return (\n            <div className={classes.graphContainer}>\n                <canvas\n                    id=\"myChart\"\n                    ref={this.chartRef}\n                />\n            </div>\n        )\n    }\n}\n\nexport default PriceHistoryGraph\n"]},"metadata":{},"sourceType":"module"}