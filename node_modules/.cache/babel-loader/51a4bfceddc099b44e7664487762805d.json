{"ast":null,"code":"var _jsxFileName = \"/Users/saumay/Desktop/miner-marketplace-frontend/src/components/TransactionTable.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Table } from 'antd';\nexport class TransactionTable extends Component {\n  constructor(...args) {\n    super(...args);\n    this.columns = [{\n      title: \"Transaction Type\",\n      dataIndex: \"direction\",\n      align: \"left\",\n      sorter: {\n        compare: (a, b) => a.direction - b.direction\n      },\n      filters: [{\n        text: 'INCOMING',\n        value: 'INCOMING'\n      }, {\n        text: 'OUTGOING',\n        value: 'OUTGOING'\n      }]\n    }, {\n      title: \"Amount\",\n      dataIndex: \"amount\",\n      align: \"left\",\n      sorter: {\n        compare: (a, b) => a.amount - b.amount\n      },\n      render: value => this.formatFIL(value)\n    }, {\n      title: \"Sender\",\n      dataIndex: \"sender\",\n      align: \"left\"\n    }, {\n      title: \"Receiver\",\n      dataIndex: \"receiver\",\n      align: \"left\"\n    }, {\n      title: \"Height\",\n      dataIndex: \"height\",\n      align: \"left\",\n      sorter: {\n        compare: (a, b) => a.height - b.height\n      }\n    }, {\n      title: \"Miner Fee\",\n      dataIndex: \"minerFee\",\n      align: \"left\",\n      sorter: {\n        compare: (a, b) => parseInt(a.minerFee) - parseInt(b.minerFee)\n      },\n      render: value => this.formatFIL(value)\n    }, {\n      title: \"Burn Fee\",\n      dataIndex: \"burnFee\",\n      align: \"left\",\n      sorter: {\n        compare: (a, b) => parseInt(a.burnFee) - parseInt(b.burnFee)\n      },\n      render: value => this.formatFIL(value)\n    }, {\n      title: \"Actor Name\",\n      dataIndex: \"actorName\",\n      align: \"left\",\n      sorter: {\n        compare: (a, b) => a.actorName - b.actorName\n      }\n    }, {\n      title: \"Method\",\n      dataIndex: \"methodName\",\n      align: \"left\",\n      sorter: {\n        compare: (a, b) => a.methodName - b.methodName\n      }\n    }];\n\n    this.handleTableChange = (pagination, filters, sorter) => {\n      this.fetch({\n        sortField: sorter.field,\n        sortOrder: sorter.order,\n        pagination,\n        ...filters\n      });\n    };\n  }\n\n  // columns = [\n  // {\n  //     title: 'Address',\n  //     dataIndex: 'Address',\n  //     align: 'left',\n  // },\n  // {\n  //     title: 'Activation Round',\n  //     dataIndex: 'ActivationRound',\n  //     align: 'center',\n  //     sorter: {\n  //         compare: (a, b) => a.ActivationRound - b.ActivationRound\n  //     },\n  // },\n  // {\n  //     title: 'Last Reward Round',\n  //     dataIndex: 'LastRewardRound',\n  //     align: 'center',\n  //     sorter: {\n  //         compare: (a, b) => a.LastRewardRound - b.LastRewardRound\n  //     },\n  // },\n  // {\n  //     title: 'Delegated Stake',\n  //     dataIndex: 'DelegatedStake',\n  //     align: 'right',\n  //     sorter: {\n  //         compare: (a, b) => a.DelegatedStakeRaw - b.DelegatedStakeRaw\n  //     },\n  // },\n  // {\n  //     title: 'Reward Cut',\n  //     dataIndex: 'RewardCut',\n  //     align: 'right',\n  //     sorter: {\n  //         compare: (a, b) => a.RewardCut - b.RewardCut\n  //     },\n  //     render: (text) => text + \"%\"\n  // },\n  // {\n  //     title: 'Fee Share',\n  //     dataIndex: 'FeeShare',\n  //     align: 'right',\n  //     sorter: {\n  //         compare: (a, b) => a.FeeShare - b.FeeShare\n  //     },\n  //     render: (text) => text + \"%\"\n  // },\n  // {\n  //     title: 'Total Fees Earned',\n  //     dataIndex: 'TotalGeneratedFees',\n  //     align: 'right',\n  //     sorter: {\n  //         compare: (a, b) => a.TotalGeneratedFeesRaw - b.TotalGeneratedFeesRaw\n  //     }\n  // },\n  // {\n  //     title: 'Price Per Pixel',\n  //     dataIndex: 'PricePerPixel',\n  //     align: 'right',\n  //     sorter: {\n  //         compare: (a, b) => a.PricePerPixelRaw - b.PricePerPixelRaw\n  //     }\n  // },\n  // {\n  //     title: 'Price History',\n  //     align: 'center',\n  //     render: function (text, record, index) {\n  //         return (\n  //             <Link to={{\n  //                 pathname: \"/priceHistory/\"+record.Address,\n  //                 address: record.Address\n  //             }}>\n  //                 { \"View\" }\n  //             </Link>\n  //         )\n  //     }\n  // },\n  // // {\n  // //     title: 'Active',\n  // //     dataIndex: 'Active',\n  // //     align: 'center',\n  // // },\n  // // {\n  // //     title: 'Status',\n  // //     dataIndex: 'Status',\n  // //     align: 'center',\n  // // },\n  // ];\n  // formatNumber(num, prec) {\n  //     num = num.toFixed(prec)\n  //     num = num.toString()\n  //     let numstring = \"\"\n  //     let periodpos = num.indexOf(\".\")\n  //     let flag = 0\n  //     numstring = num.slice(periodpos, num.length)\n  //     for (let index = periodpos; index > 0; index=index-3) {\n  //         let start = index - 3\n  //         if (start < 0) {\n  //             start = 0\n  //         }\n  //         if(flag===0) {\n  //             numstring = num.slice(start, index) + numstring\n  //             flag = 1\n  //         } else {\n  //             numstring = num.slice(start, index) + \",\" + numstring\n  //         }\n  //     }\n  //     return numstring\n  // }\n  // processDelegatedStake(ds) {\n  //     if (ds > 10**15) {\n  //         return this.formatNumber(ds / 10**18, 3) + \" LPT\"\n  //     } else {\n  //         return this.formatNumber(ds, 3) + \" LPTU\"\n  //     }\n  // }\n  // processFees(fees) {\n  //     fees = fees * 1.0\n  //     return this.formatNumber(fees / 10**18, 6) + \" ETH\"\n  // }\n  // processPPP(ppp) {\n  //     if (ppp < 0) {\n  //         return \"-\" + this.formatNumber(Math.abs(ppp), 3) + \" wei\"\n  //     } else {\n  //         return this.formatNumber(Math.abs(ppp), 3) + \" wei\"\n  //     }\n  // }\n  // preprocessData(data) {\n  //     let newdata = []\n  //     data.forEach(element => {\n  //         newdata.push({\n  //             key: element.Address,\n  //             Address: element.Address,\n  //             ServiceURI: element.ServiceURI,\n  //             LastRewardRound: element.LastRewardRound,\n  //             RewardCut: element.RewardCut / 10000,\n  //             FeeShare: element.FeeShare / 10000,\n  //             DelegatedStakeRaw: element.DelegatedStake,\n  //             DelegatedStake: this.processDelegatedStake(element.DelegatedStake),\n  //             ActivationRound: element.ActivationRound,\n  //             DeactivationRound: element.DeactivationRound,\n  //             Active: (element.Active ? \"Active\" : \"Inactive\"),\n  //             Status: element.Status,\n  //             PricePerPixelRaw: element.PricePerPixel,\n  //             PricePerPixel: this.processPPP(element.PricePerPixel),\n  //             UpdatedAt: element.UpdatedAt,\n  //             TotalGeneratedFeesRaw: element.TotalGeneratedFees,\n  //             TotalGeneratedFees: this.processFees(element.TotalGeneratedFees),\n  //         })\n  //     });\n  //     return newdata\n  // }\n  // onChange (pagination, filters, sorter, extra) {\n  //     console.log('params', pagination, filters, sorter, extra);\n  // }\n  formatFIL(value) {\n    value = parseInt(value); // console.log(value, typeof(value))\n\n    value = value / 10 ** 18; // console.log(value)\n\n    value = value.toFixed(4); // console.log(value)\n\n    return value.toString() + \" FIL\";\n  }\n\n  onChange(pagination, filters, sorter, extra) {\n    console.log('params', pagination, filters, sorter, extra);\n  }\n\n  render() {\n    // const data = this.preprocessData(this.props.data)\n    return /*#__PURE__*/React.createElement(Table, {\n      columns: this.columns,\n      dataSource: this.props.data,\n      onChange: this.handleTableChange,\n      loading: loading,\n      pagination: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 13\n      }\n    });\n  }\n\n}\nexport default TransactionTable;","map":{"version":3,"sources":["/Users/saumay/Desktop/miner-marketplace-frontend/src/components/TransactionTable.js"],"names":["React","Component","Link","Table","TransactionTable","columns","title","dataIndex","align","sorter","compare","a","b","direction","filters","text","value","amount","render","formatFIL","height","parseInt","minerFee","burnFee","actorName","methodName","handleTableChange","pagination","fetch","sortField","field","sortOrder","order","toFixed","toString","onChange","extra","console","log","props","data","loading"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Link } from 'react-router-dom';\nimport { Table } from 'antd';\n\nexport class TransactionTable extends Component {\n\n    // columns = [\n    // {\n    //     title: 'Address',\n    //     dataIndex: 'Address',\n    //     align: 'left',\n    // },\n    // {\n    //     title: 'Activation Round',\n    //     dataIndex: 'ActivationRound',\n    //     align: 'center',\n    //     sorter: {\n    //         compare: (a, b) => a.ActivationRound - b.ActivationRound\n    //     },\n    // },\n    // {\n    //     title: 'Last Reward Round',\n    //     dataIndex: 'LastRewardRound',\n    //     align: 'center',\n    //     sorter: {\n    //         compare: (a, b) => a.LastRewardRound - b.LastRewardRound\n    //     },\n    // },\n    // {\n    //     title: 'Delegated Stake',\n    //     dataIndex: 'DelegatedStake',\n    //     align: 'right',\n    //     sorter: {\n    //         compare: (a, b) => a.DelegatedStakeRaw - b.DelegatedStakeRaw\n    //     },\n    // },\n    // {\n    //     title: 'Reward Cut',\n    //     dataIndex: 'RewardCut',\n    //     align: 'right',\n    //     sorter: {\n    //         compare: (a, b) => a.RewardCut - b.RewardCut\n    //     },\n    //     render: (text) => text + \"%\"\n    // },\n    // {\n    //     title: 'Fee Share',\n    //     dataIndex: 'FeeShare',\n    //     align: 'right',\n    //     sorter: {\n    //         compare: (a, b) => a.FeeShare - b.FeeShare\n    //     },\n    //     render: (text) => text + \"%\"\n    // },\n    // {\n    //     title: 'Total Fees Earned',\n    //     dataIndex: 'TotalGeneratedFees',\n    //     align: 'right',\n    //     sorter: {\n    //         compare: (a, b) => a.TotalGeneratedFeesRaw - b.TotalGeneratedFeesRaw\n    //     }\n    // },\n    // {\n    //     title: 'Price Per Pixel',\n    //     dataIndex: 'PricePerPixel',\n    //     align: 'right',\n    //     sorter: {\n    //         compare: (a, b) => a.PricePerPixelRaw - b.PricePerPixelRaw\n    //     }\n    // },\n    // {\n    //     title: 'Price History',\n    //     align: 'center',\n    //     render: function (text, record, index) {\n    //         return (\n    //             <Link to={{\n    //                 pathname: \"/priceHistory/\"+record.Address,\n    //                 address: record.Address\n    //             }}>\n    //                 { \"View\" }\n    //             </Link>\n    //         )\n    //     }\n    // },\n    // // {\n    // //     title: 'Active',\n    // //     dataIndex: 'Active',\n    // //     align: 'center',\n    // // },\n    // // {\n    // //     title: 'Status',\n    // //     dataIndex: 'Status',\n    // //     align: 'center',\n    // // },\n    // ];\n\n    // formatNumber(num, prec) {\n    //     num = num.toFixed(prec)\n    //     num = num.toString()\n    //     let numstring = \"\"\n    //     let periodpos = num.indexOf(\".\")\n    //     let flag = 0\n    //     numstring = num.slice(periodpos, num.length)\n    //     for (let index = periodpos; index > 0; index=index-3) {\n    //         let start = index - 3\n    //         if (start < 0) {\n    //             start = 0\n    //         }\n    //         if(flag===0) {\n    //             numstring = num.slice(start, index) + numstring\n    //             flag = 1\n    //         } else {\n    //             numstring = num.slice(start, index) + \",\" + numstring\n    //         }\n    //     }\n    //     return numstring\n    // }\n\n    // processDelegatedStake(ds) {\n    //     if (ds > 10**15) {\n    //         return this.formatNumber(ds / 10**18, 3) + \" LPT\"\n    //     } else {\n    //         return this.formatNumber(ds, 3) + \" LPTU\"\n    //     }\n    // }\n\n    // processFees(fees) {\n    //     fees = fees * 1.0\n    //     return this.formatNumber(fees / 10**18, 6) + \" ETH\"\n    // }\n\n    // processPPP(ppp) {\n    //     if (ppp < 0) {\n    //         return \"-\" + this.formatNumber(Math.abs(ppp), 3) + \" wei\"\n    //     } else {\n    //         return this.formatNumber(Math.abs(ppp), 3) + \" wei\"\n    //     }\n    // }\n\n    // preprocessData(data) {\n    //     let newdata = []\n    //     data.forEach(element => {\n    //         newdata.push({\n    //             key: element.Address,\n    //             Address: element.Address,\n    //             ServiceURI: element.ServiceURI,\n    //             LastRewardRound: element.LastRewardRound,\n    //             RewardCut: element.RewardCut / 10000,\n    //             FeeShare: element.FeeShare / 10000,\n    //             DelegatedStakeRaw: element.DelegatedStake,\n    //             DelegatedStake: this.processDelegatedStake(element.DelegatedStake),\n    //             ActivationRound: element.ActivationRound,\n    //             DeactivationRound: element.DeactivationRound,\n    //             Active: (element.Active ? \"Active\" : \"Inactive\"),\n    //             Status: element.Status,\n    //             PricePerPixelRaw: element.PricePerPixel,\n    //             PricePerPixel: this.processPPP(element.PricePerPixel),\n    //             UpdatedAt: element.UpdatedAt,\n    //             TotalGeneratedFeesRaw: element.TotalGeneratedFees,\n    //             TotalGeneratedFees: this.processFees(element.TotalGeneratedFees),\n    //         })\n    //     });\n    //     return newdata\n    // }\n\n    // onChange (pagination, filters, sorter, extra) {\n    //     console.log('params', pagination, filters, sorter, extra);\n    // }\n\n    formatFIL(value) {\n        value = parseInt(value)\n        // console.log(value, typeof(value))\n        value = value / (10 ** 18)\n        // console.log(value)\n        value = value.toFixed(4)\n        // console.log(value)\n        return value.toString() + \" FIL\"\n    }\n\n    columns = [\n        {\n            title: \"Transaction Type\",\n            dataIndex: \"direction\",\n            align: \"left\",\n            sorter: {\n                compare: (a, b) => a.direction - b.direction\n            },\n            filters: [\n                { text: 'INCOMING', value: 'INCOMING' },\n                { text: 'OUTGOING', value: 'OUTGOING' },\n            ],\n        },\n        {\n            title: \"Amount\",\n            dataIndex: \"amount\",\n            align: \"left\",\n            sorter: {\n                compare: (a, b) => a.amount - b.amount\n            },\n            render: (value) => this.formatFIL(value)\n        },\n        {\n            title: \"Sender\",\n            dataIndex: \"sender\",\n            align: \"left\"\n        },\n        {\n            title: \"Receiver\",\n            dataIndex: \"receiver\",\n            align: \"left\"\n        },\n        {\n            title: \"Height\",\n            dataIndex: \"height\",\n            align: \"left\",\n            sorter: {\n                compare: (a, b) => a.height - b.height\n            }\n        },\n        {\n            title: \"Miner Fee\",\n            dataIndex: \"minerFee\",\n            align: \"left\",\n            sorter: {\n                compare: (a, b) => parseInt(a.minerFee) - parseInt(b.minerFee)\n            },\n            render: (value) => this.formatFIL(value)\n        },\n        {\n            title: \"Burn Fee\",\n            dataIndex: \"burnFee\",\n            align: \"left\",\n            sorter: {\n                compare: (a, b) => parseInt(a.burnFee) - parseInt(b.burnFee)\n            },\n            render: (value) => this.formatFIL(value)\n        },\n        {\n            title: \"Actor Name\",\n            dataIndex: \"actorName\",\n            align: \"left\",\n            sorter: {\n                compare: (a, b) => a.actorName - b.actorName\n            }\n        }, {\n            title: \"Method\",\n            dataIndex: \"methodName\",\n            align: \"left\",\n            sorter: {\n                compare: (a, b) => a.methodName - b.methodName\n            }\n        },\n    ]\n\n    onChange(pagination, filters, sorter, extra) {\n        console.log('params', pagination, filters, sorter, extra);\n    }\n\n    handleTableChange = (pagination, filters, sorter) => {\n        this.fetch({\n            sortField: sorter.field,\n            sortOrder: sorter.order,\n            pagination,\n            ...filters,\n        });\n    };\n\n\n\n    render() {\n        // const data = this.preprocessData(this.props.data)\n        return (\n            <Table columns={this.columns} dataSource={this.props.data} onChange={this.handleTableChange} loading={loading} pagination={true} />\n        )\n    }\n}\n\nexport default TransactionTable\n"]},"metadata":{},"sourceType":"module"}