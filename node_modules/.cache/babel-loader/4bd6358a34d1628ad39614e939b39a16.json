{"ast":null,"code":"var _jsxFileName = \"/Users/saumay/Desktop/miner-marketplace-frontend/src/components/TransactionTable.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Table } from 'antd';\nexport class TransactionTable extends Component {\n  constructor(...args) {\n    super(...args);\n    this.columns = [{\n      title: \"Transaction Type\",\n      dataIndex: \"transactionType\",\n      align: \"left\"\n    }, {\n      title: \"Amount\",\n      dataIndex: \"amount\",\n      align: \"left\"\n    }, {\n      title: \"Sender\",\n      dataIndex: \"sender\",\n      align: \"left\"\n    }, {\n      title: \"Receiver\",\n      dataIndex: \"receiver\",\n      align: \"left\"\n    }, {\n      title: \"Height\",\n      dataIndex: \"height\",\n      align: \"left\"\n    }, {\n      title: \"Timestamp\",\n      dataIndex: \"timestamp\",\n      align: \"left\"\n    }, {\n      title: \"Network Fee\",\n      dataIndex: \"networkFee\",\n      align: \"left\"\n    }];\n  }\n\n  render() {\n    const data = this.preprocessData(this.props.data);\n    return /*#__PURE__*/React.createElement(Table, {\n      columns: this.columns,\n      dataSource: data,\n      onChange: this.onChange,\n      pagination: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 13\n      }\n    });\n  }\n\n}\nexport default TransactionTable;","map":{"version":3,"sources":["/Users/saumay/Desktop/miner-marketplace-frontend/src/components/TransactionTable.js"],"names":["React","Component","Link","Table","TransactionTable","columns","title","dataIndex","align","render","data","preprocessData","props","onChange"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,KAAT,QAAsB,MAAtB;AAEA,OAAO,MAAMC,gBAAN,SAA+BH,SAA/B,CAAyC;AAAA;AAAA;AAAA,SAqK5CI,OArK4C,GAqKlC,CACN;AACIC,MAAAA,KAAK,EAAE,kBADX;AAEIC,MAAAA,SAAS,EAAE,iBAFf;AAGIC,MAAAA,KAAK,EAAE;AAHX,KADM,EAMN;AACIF,MAAAA,KAAK,EAAE,QADX;AAEIC,MAAAA,SAAS,EAAE,QAFf;AAGIC,MAAAA,KAAK,EAAE;AAHX,KANM,EAWN;AACIF,MAAAA,KAAK,EAAE,QADX;AAEIC,MAAAA,SAAS,EAAE,QAFf;AAGIC,MAAAA,KAAK,EAAE;AAHX,KAXM,EAgBN;AACIF,MAAAA,KAAK,EAAE,UADX;AAEIC,MAAAA,SAAS,EAAE,UAFf;AAGIC,MAAAA,KAAK,EAAE;AAHX,KAhBM,EAqBN;AACIF,MAAAA,KAAK,EAAE,QADX;AAEIC,MAAAA,SAAS,EAAE,QAFf;AAGIC,MAAAA,KAAK,EAAE;AAHX,KArBM,EA0BN;AACIF,MAAAA,KAAK,EAAE,WADX;AAEIC,MAAAA,SAAS,EAAE,WAFf;AAGIC,MAAAA,KAAK,EAAE;AAHX,KA1BM,EA+BN;AACIF,MAAAA,KAAK,EAAE,aADX;AAEIC,MAAAA,SAAS,EAAE,YAFf;AAGIC,MAAAA,KAAK,EAAE;AAHX,KA/BM,CArKkC;AAAA;;AA4M5CC,EAAAA,MAAM,GAAG;AACL,UAAMC,IAAI,GAAG,KAAKC,cAAL,CAAoB,KAAKC,KAAL,CAAWF,IAA/B,CAAb;AACA,wBACI,oBAAC,KAAD;AAAO,MAAA,OAAO,EAAE,KAAKL,OAArB;AAA8B,MAAA,UAAU,EAAEK,IAA1C;AAAgD,MAAA,QAAQ,EAAE,KAAKG,QAA/D;AAAyE,MAAA,UAAU,EAAE,KAArF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAGH;;AAjN2C;AAoNhD,eAAeT,gBAAf","sourcesContent":["import React, { Component } from 'react'\nimport { Link } from 'react-router-dom';\nimport { Table } from 'antd';\n\nexport class TransactionTable extends Component {\n\n    // columns = [\n    // {\n    //     title: 'Address',\n    //     dataIndex: 'Address',\n    //     align: 'left',\n    // },\n    // {\n    //     title: 'Activation Round',\n    //     dataIndex: 'ActivationRound',\n    //     align: 'center',\n    //     sorter: {\n    //         compare: (a, b) => a.ActivationRound - b.ActivationRound\n    //     },\n    // },\n    // {\n    //     title: 'Last Reward Round',\n    //     dataIndex: 'LastRewardRound',\n    //     align: 'center',\n    //     sorter: {\n    //         compare: (a, b) => a.LastRewardRound - b.LastRewardRound\n    //     },\n    // },\n    // {\n    //     title: 'Delegated Stake',\n    //     dataIndex: 'DelegatedStake',\n    //     align: 'right',\n    //     sorter: {\n    //         compare: (a, b) => a.DelegatedStakeRaw - b.DelegatedStakeRaw\n    //     },\n    // },\n    // {\n    //     title: 'Reward Cut',\n    //     dataIndex: 'RewardCut',\n    //     align: 'right',\n    //     sorter: {\n    //         compare: (a, b) => a.RewardCut - b.RewardCut\n    //     },\n    //     render: (text) => text + \"%\"\n    // },\n    // {\n    //     title: 'Fee Share',\n    //     dataIndex: 'FeeShare',\n    //     align: 'right',\n    //     sorter: {\n    //         compare: (a, b) => a.FeeShare - b.FeeShare\n    //     },\n    //     render: (text) => text + \"%\"\n    // },\n    // {\n    //     title: 'Total Fees Earned',\n    //     dataIndex: 'TotalGeneratedFees',\n    //     align: 'right',\n    //     sorter: {\n    //         compare: (a, b) => a.TotalGeneratedFeesRaw - b.TotalGeneratedFeesRaw\n    //     }\n    // },\n    // {\n    //     title: 'Price Per Pixel',\n    //     dataIndex: 'PricePerPixel',\n    //     align: 'right',\n    //     sorter: {\n    //         compare: (a, b) => a.PricePerPixelRaw - b.PricePerPixelRaw\n    //     }\n    // },\n    // {\n    //     title: 'Price History',\n    //     align: 'center',\n    //     render: function (text, record, index) {\n    //         return (\n    //             <Link to={{\n    //                 pathname: \"/priceHistory/\"+record.Address,\n    //                 address: record.Address\n    //             }}>\n    //                 { \"View\" }\n    //             </Link>\n    //         )\n    //     }\n    // },\n    // // {\n    // //     title: 'Active',\n    // //     dataIndex: 'Active',\n    // //     align: 'center',\n    // // },\n    // // {\n    // //     title: 'Status',\n    // //     dataIndex: 'Status',\n    // //     align: 'center',\n    // // },\n    // ];\n\n    // formatNumber(num, prec) {\n    //     num = num.toFixed(prec)\n    //     num = num.toString()\n    //     let numstring = \"\"\n    //     let periodpos = num.indexOf(\".\")\n    //     let flag = 0\n    //     numstring = num.slice(periodpos, num.length)\n    //     for (let index = periodpos; index > 0; index=index-3) {\n    //         let start = index - 3\n    //         if (start < 0) {\n    //             start = 0\n    //         }\n    //         if(flag===0) {\n    //             numstring = num.slice(start, index) + numstring\n    //             flag = 1\n    //         } else {\n    //             numstring = num.slice(start, index) + \",\" + numstring\n    //         }\n    //     }\n    //     return numstring\n    // }\n\n    // processDelegatedStake(ds) {\n    //     if (ds > 10**15) {\n    //         return this.formatNumber(ds / 10**18, 3) + \" LPT\"\n    //     } else {\n    //         return this.formatNumber(ds, 3) + \" LPTU\"\n    //     }\n    // }\n\n    // processFees(fees) {\n    //     fees = fees * 1.0\n    //     return this.formatNumber(fees / 10**18, 6) + \" ETH\"\n    // }\n\n    // processPPP(ppp) {\n    //     if (ppp < 0) {\n    //         return \"-\" + this.formatNumber(Math.abs(ppp), 3) + \" wei\"\n    //     } else {\n    //         return this.formatNumber(Math.abs(ppp), 3) + \" wei\"\n    //     }\n    // }\n\n    // preprocessData(data) {\n    //     let newdata = []\n    //     data.forEach(element => {\n    //         newdata.push({\n    //             key: element.Address,\n    //             Address: element.Address,\n    //             ServiceURI: element.ServiceURI,\n    //             LastRewardRound: element.LastRewardRound,\n    //             RewardCut: element.RewardCut / 10000,\n    //             FeeShare: element.FeeShare / 10000,\n    //             DelegatedStakeRaw: element.DelegatedStake,\n    //             DelegatedStake: this.processDelegatedStake(element.DelegatedStake),\n    //             ActivationRound: element.ActivationRound,\n    //             DeactivationRound: element.DeactivationRound,\n    //             Active: (element.Active ? \"Active\" : \"Inactive\"),\n    //             Status: element.Status,\n    //             PricePerPixelRaw: element.PricePerPixel,\n    //             PricePerPixel: this.processPPP(element.PricePerPixel),\n    //             UpdatedAt: element.UpdatedAt,\n    //             TotalGeneratedFeesRaw: element.TotalGeneratedFees,\n    //             TotalGeneratedFees: this.processFees(element.TotalGeneratedFees),\n    //         })\n    //     });\n    //     return newdata\n    // }\n\n    // onChange (pagination, filters, sorter, extra) {\n    //     console.log('params', pagination, filters, sorter, extra);\n    // }\n\n    columns = [\n        {\n            title: \"Transaction Type\",\n            dataIndex: \"transactionType\",\n            align: \"left\"\n        },\n        {\n            title: \"Amount\",\n            dataIndex: \"amount\",\n            align: \"left\"\n        },\n        {\n            title: \"Sender\",\n            dataIndex: \"sender\",\n            align: \"left\"\n        },\n        {\n            title: \"Receiver\",\n            dataIndex: \"receiver\",\n            align: \"left\"\n        },\n        {\n            title: \"Height\",\n            dataIndex: \"height\",\n            align: \"left\"\n        },\n        {\n            title: \"Timestamp\",\n            dataIndex: \"timestamp\",\n            align: \"left\"\n        },\n        {\n            title: \"Network Fee\",\n            dataIndex: \"networkFee\",\n            align: \"left\"\n        },\n    ]\n    \n    \n    render() {\n        const data = this.preprocessData(this.props.data)\n        return (\n            <Table columns={this.columns} dataSource={data} onChange={this.onChange} pagination={false}/>\n        )\n    }\n}\n\nexport default TransactionTable\n"]},"metadata":{},"sourceType":"module"}